plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    //id 'org.asciidoctor.convert' version '1.5.8'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
    id 'jacoco'
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.7'
//  default is  "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS' // 각 클래스마다 minimun rate를 넘어야 함
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }
        }
    }
}
task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

group = 'me.jooomOut'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext { // 스니펫 생성 위치 설정
    set('snippetsDir', file("build/generated-snippets"))
}
asciidoctor {
    inputs.dir snippetsDir // 생성된 스니펫 위치
    /*sourceDir 'src/main/asciidoc'
    attributes 'snippets': file('target/snippets')*/
    dependsOn test
}
bootJar {
    dependsOn asciidoctor
//	from ("${asciidoctor.outputDir}/html5") {
//		into "static/docs"
//	}
}
task copyDocument(type: Copy) {
    dependsOn asciidoctor

    from file("build/asciidoc/html5/")
    into file("src/main/resources/static/docs")
}

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'junit:junit:4.13.1'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    compileOnly 'org.projectlombok:lombok'
    testRuntimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.modelmapper:modelmapper:2.1.1'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.5.4'
    // https://mvnrepository.com/artifact/pl.pragmatists/JUnitParams
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-asciidoctor:1.2.6.RELEASE' // adoc 파일 자동 구성
    // https://mvnrepository.com/artifact/org.springframework.security.oauth.boot/spring-security-oauth2-autoconfigure
    implementation 'org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.3.12.RELEASE'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
    testImplementation 'org.springframework.security:spring-security-test:5.3.11.RELEASE'

    implementation 'org.springframework.boot:spring-boot-configuration-processor:2.5.5'

    // TEST CONTAINER
    testImplementation "org.testcontainers:testcontainers:1.16.0"
    testImplementation "org.testcontainers:postgresql:1.16.0"
    //testImplementation "org.testcontainers:mongodb:1.16.0"
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'




}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}


